{"version":3,"sources":["components/TodoItem.js","components/TodoList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","serviceWorker.js","index.js"],"names":["completedStyle","fontStyle","color","opacity","textDecoration","TodoItem","this","props","todo","completed","id","title","className","type","checked","onChange","handleChangeProps","onClick","delTodoProps","style","React","Component","TodosList","todos","map","key","Header","padding","lineHeight","fontSize","marginBottom","InputTodo","state","e","setState","target","name","value","handleSubmit","preventDefault","addTodoProps","onSubmit","placeholder","TodoContainer","uuidv4","handleChange","delTodo","filter","addTodoItem","newTodo","TodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAEMA,EAAiB,CACnBC,UAAW,SACXC,MAAO,UACPC,QAAS,GACTC,eAAgB,gBAwBLC,E,uKApBD,IAAD,SAE4BC,KAAKC,MAAMC,KAApCC,EAFH,EAEGA,UAAWC,EAFd,EAEcA,GAAIC,EAFlB,EAEkBA,MACvB,OAAO,wBAAIC,UAAU,aACjB,2BACIC,KAAK,WACLC,QAASL,EACTM,SAAU,kBAAM,EAAKR,MAAMS,kBAAkBN,MAEjD,4BAAQO,QAAS,kBAAM,EAAKV,MAAMW,aAAaR,KAA/C,UAGA,0BAAMS,MAAOV,EAAYT,EAAiB,MACrCW,Q,GAdMS,IAAMC,WCMdC,E,uKAXH,IAAD,OACP,OACE,6BACGhB,KAAKC,MAAMgB,MAAMC,KAAI,SAAAhB,GAAI,OACxB,kBAAC,EAAD,CAAUiB,IAAKjB,EAAKE,GAAIF,KAAMA,EAAMQ,kBAAmB,EAAKT,MAAMS,kBAAmBE,aAAc,EAAKX,MAAMW,uB,GALhGE,IAAMC,WCcfK,EAfA,WAKX,OACI,4BAAQP,MALQ,CAChBQ,QAAS,SACTC,WAAY,QAIR,wBAAIT,MAAO,CAAEU,SAAU,OAAQC,aAAc,SAA7C,mBACA,uBAAGX,MAAO,CAAEU,SAAU,SAAtB,uD,OCwBGE,E,4MA/BXC,MAAQ,CACJrB,MAAO,I,EAEXI,SAAW,SAAAkB,GACP,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAGlCC,aAAe,SAAAL,GACXA,EAAEM,iBACF,EAAKhC,MAAMiC,aAAa,EAAKR,MAAMrB,OACnC,EAAKuB,SAAS,CACVvB,MAAO,M,uDAIX,OACI,0BAAM8B,SAAUnC,KAAKgC,aAAc1B,UAAU,kBACzC,2BACIC,KAAK,OACLD,UAAU,aACV8B,YAAY,cACZL,MAAO/B,KAAK0B,MAAMrB,MAClByB,KAAK,QACLrB,SAAUT,KAAKS,WAEnB,2BAAOF,KAAK,SAASD,UAAU,eAAeyB,MAAM,gB,GA3B5ChB,aCsDTsB,E,4MAjDXX,MAAQ,CACJT,MAAO,CACH,CACIb,GAAIkC,cACJjC,MAAO,gCACPF,WAAW,K,EAIvBoC,aAAe,SAAAnC,GACX,EAAKwB,SAAS,CACVX,MAAO,EAAKS,MAAMT,MAAMC,KAAI,SAAAhB,GAIxB,OAHIA,EAAKE,KAAOA,IACZF,EAAKC,WAAaD,EAAKC,WAEpBD,Q,EAInBsC,QAAU,SAAApC,GACN,EAAKwB,SAAS,CACVX,MAAM,YACC,EAAKS,MAAMT,MAAMwB,QAAO,SAAAvC,GACvB,OAAOA,EAAKE,KAAOA,S,EAKnCsC,YAAc,SAAArC,GACV,IAAMsC,EAAU,CACdvC,GAAIkC,cACJjC,MAAOA,EACPF,WAAW,GAEb,EAAKyB,SAAS,CACZX,MAAM,GAAD,mBAAM,EAAKS,MAAMT,OAAjB,CAAwB0B,O,uDAI/B,OACI,yBAAKrC,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAW4B,aAAclC,KAAK0C,cAC9B,kBAACE,EAAD,CAAU3B,MAAOjB,KAAK0B,MAAMT,MAAOP,kBAAmBV,KAAKuC,aAAc3B,aAAcZ,KAAKwC,e,GA5ChF1B,IAAMC,WCMd8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,SD4HrD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.18234cfa.chunk.js","sourcesContent":["import React from \"react\";\n\nconst completedStyle = {\n    fontStyle: \"italic\",\n    color: \"#d35e0f\",\n    opacity: 0.4,\n    textDecoration: \"line-through\",\n}\n\nclass TodoItem extends React.Component {\n    render() {\n\n        const { completed, id, title } = this.props.todo;\n        return <li className=\"todo-item\">\n            <input\n                type=\"checkbox\"\n                checked={completed}\n                onChange={() => this.props.handleChangeProps(id)}\n            />\n            <button onClick={() => this.props.delTodoProps(id)}>\n                Delete\n            </button>\n            <span style={completed ? completedStyle : null}>\n                {title}\n            </span>\n        </li>\n\n    }\n}\n\nexport default TodoItem","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nclass TodosList extends React.Component {\n  render() {\n    return (\n      <div>\n        {this.props.todos.map(todo => (\n          <TodoItem key={todo.id} todo={todo} handleChangeProps={this.props.handleChangeProps} delTodoProps={this.props.delTodoProps}/>\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default TodosList","import React from 'react';\n\nconst Header = () => {\n    const headerStyle = {\n        padding: \"20px 0\",\n        lineHeight: \"2em\",\n    }\n    return (\n        <header style={headerStyle}>\n            <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>Simple Todo App</h1>\n            <p style={{ fontSize: \"19px\" }}>\n                Please add to-dos item(s) through the input field\n          </p>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from \"react\"\n\nclass InputTodo extends Component {\n    state = {\n        title: \"\",\n    }\n    onChange = e => {\n        this.setState({\n            [e.target.name]: e.target.value,\n        })\n    }\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.addTodoProps(this.state.title);\n        this.setState({\n            title: \"\"\n        });\n    };\n    render() {\n        return (\n            <form onSubmit={this.handleSubmit} className=\"form-container\">\n                <input\n                    type=\"text\"\n                    className=\"input-text\"\n                    placeholder=\"Add todo...\"\n                    value={this.state.title}\n                    name=\"title\"\n                    onChange={this.onChange}\n                />\n                <input type=\"submit\" className=\"input-submit\" value=\"Submit\" />\n            </form>\n        )\n    }\n}\nexport default InputTodo","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport TodoList from './TodoList';\nimport Header from \"./Header\";\nimport InputTodo from \"./InputTodo\";\n\nclass TodoContainer extends React.Component {\n    state = {\n        todos: [\n            {\n                id: uuidv4(),\n                title: \"Setup development environment\",\n                completed: true,\n            }\n        ]\n    }\n    handleChange = id => {\n        this.setState({\n            todos: this.state.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            })\n        });\n    };\n    delTodo = id => {\n        this.setState({\n            todos: [\n                ...this.state.todos.filter(todo => {\n                    return todo.id !== id;\n                })\n            ]\n        });\n    };\n    addTodoItem = title => {\n        const newTodo = {\n          id: uuidv4(),\n          title: title,\n          completed: false\n        };\n        this.setState({\n          todos: [...this.state.todos, newTodo]\n        });\n      };\n    render() {\n        return (\n            <div className=\"container\">\n                <Header />\n                <InputTodo addTodoProps={this.addTodoItem} />\n                <TodoList todos={this.state.todos} handleChangeProps={this.handleChange} delTodoProps={this.delTodo} />\n            </div>\n        );\n    }\n}\n\nexport default TodoContainer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport TodoContainer from './components/TodoContainer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<TodoContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}